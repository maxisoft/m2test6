plugins {
    id 'org.hidetake.ssh' version '1.1.4'
}

group 'bdgs'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'


sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}


compileJava.options.encoding = 'UTF-8'

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.+'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.48.2'
}


ssh.settings {
    dryRun = project.hasProperty('dryRun')
}

remotes {
    web01 {
        role 'master'
        host = 'm2gl.deptinfo-st.univ-fcomte.fr'
        user = 'm2test6'
        identity = file('ssh/id_rsa')
        knownHosts = allowAnyHosts
    }
    web02 {
        role 'maxime_tunnel'
        host = '127.0.0.1'
        port = 22022
        user = 'm2test6'
        identity = file('ssh/id_rsa')
        knownHosts = allowAnyHosts
    }
}

def autoRemoteTarget() {
    System.getenv('M2TEST6_SSH_REMOTE') ?:
      System.getenv('JENKINS_URL') ? 'master' :
        System.getenv('TUNNEL_MAXIME') ? 'maxime_tunnel' : 'master'
}

def createUploadToTask(String httpDirTarget) {
    tasks.create("uploadTo${httpDirTarget.capitalize()}") << {
        def tmpDir = "/tmp/wsg6_${UUID.randomUUID()}"
        def target = "/home/m2test6/public_html/$httpDirTarget"
        ssh.run {
            session(remotes.role(autoRemoteTarget())) {
                execute ("mkdir $tmpDir")
                put from: 'website', into: tmpDir
                execute("rm -r $target/*")
                execute ("cp -r $tmpDir/website/* $target") { result ->
                    println "$result"
                }
                execute ("rm -r $tmpDir")
            }
        }
    }
}

task copyDeps(type: Copy) {
    from configurations.testCompile
    into 'build/lib'
}

['preprod', 'prod', 'test'].each {createUploadToTask(it)}

task testPhp(type: Exec) {
    commandLine 'php', '.bootstrap.atoum.php'
}

task testPhpDeployThenSelenium(type: Test, dependsOn: [testPhp, test]) {
}

test.shouldRunAfter testPhp

task writeNewPom << {
    pom.writeTo("$buildDir/newpom.xml")
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}




